rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function userDoc() { return get(/databases/$(database)/documents/users/$(request.auth.uid)); }
    function userRole() { return userDoc().data.role; }
    function userOrgId() { return userDoc().data.orgId; }
    function isSuperAdmin() { return userRole() == 'SUPER_ADMIN'; }

    // Organizations (only super admin can create/update, active orgs readable)
    match /organizations/{orgId} {
      allow read: if request.auth != null && (resource.data.isActive == true || isSuperAdmin());
      allow create: if request.auth != null && isSuperAdmin();
      allow update, delete: if request.auth != null && isSuperAdmin();
    }

    // Organization invitations (org scoped + super admin override)
    match /orgInvitations/{inviteId} {
      allow read: if request.auth != null && (resource.data.orgId == userOrgId() || isSuperAdmin());
      allow create: if request.auth != null && (request.resource.data.orgId == userOrgId() || isSuperAdmin());
      allow update: if request.auth != null && (resource.data.orgId == userOrgId() || isSuperAdmin());
      allow delete: if request.auth != null && isSuperAdmin();
    }

    // Generic multi-tenant collections pattern EXCLUDING system collections
    match /{collectionName}/{docId} {
      allow read: if request.auth != null && resource.data.orgId == userOrgId();
      allow create: if request.auth != null && request.resource.data.orgId == userOrgId();
      allow update, delete: if request.auth != null && resource.data.orgId == userOrgId();
    }
  }
}
